datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

enum MethodProvider {
  kakao
  apple
}

model UserModel {
  userId String @id @default(uuid())

  realname   String
  profileUrl String?
  phoneNo    String
  birthday   DateTime
  email      String?
  licenseId  String?
  levelNo    Int

  level   LevelModel    @relation(fields: [levelNo], references: [levelNo])
  license LicenseModel? @relation(fields: [licenseId], references: [licenseId])

  methods       MethodModel[]
  sessions      SessionModel[]
  passes        PassModel[]
  notifications NotificationModel[]
  secessions    SecessionModel[]
  points        PointModel[]

  referralCode  String
  referredUsers UserModel[] @relation("referredUsers")

  referrerUserId String?
  referrerUser   UserModel? @relation("referredUsers", fields: [referrerUserId], references: [userId])

  receiveSMS   DateTime?
  receivePush  DateTime?
  receiveEmail DateTime?

  legacyUserId String?

  usedAt    DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PhoneModel {
  phoneId String @id @default(uuid())

  phoneNo String
  code    String?

  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model MethodModel {
  methodId    String @id @default(uuid())
  description String

  userId String
  user   UserModel @relation(fields: [userId], references: [userId], onDelete: Cascade)

  provider MethodProvider
  identity String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model SessionModel {
  sessionId String @id

  userId String
  user   UserModel @relation(fields: [userId], references: [userId], onDelete: Cascade)

  platform       String  @default("")
  messagingToken String?

  usedAt    DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model LicenseModel {
  licenseId String @id @default(uuid())

  user UserModel[]

  realname   String?
  birthday   DateTime
  licenseStr String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PassProgramModel {
  passProgramId String @id @default(uuid())

  name        String
  description String @default("")

  isSale        Boolean // 판매 상품인가?
  couponGroupId String? // 쿠폰 그룹 ID
  validity      Int? // 만료일

  allowRenew Boolean // 연장 가능 여부
  price      Int? // 판매 금액

  passes PassModel[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PassModel {
  passId String @id @default(uuid())

  userId String
  user   UserModel @relation(fields: [userId], references: [userId], onDelete: Cascade)

  autoRenew     Boolean
  couponId      String?
  couponGroupId String?
  expiredAt     DateTime?

  passProgramId String
  passProgram   PassProgramModel @relation(fields: [passProgramId], references: [passProgramId], onDelete: Cascade)

  requestedAt DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

enum NotificationType {
  info
  advisting
}

model NotificationModel {
  notificationId String @id @default(uuid())

  type        NotificationType
  title       String?
  description String?
  url         String?

  userId String
  user   UserModel @relation(fields: [userId], references: [userId], onDelete: Cascade)

  visible   Boolean
  sendedAt  DateTime?
  readedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model SecessionModel {
  secssionId String @id @default(uuid())

  userId String
  user   UserModel @relation(fields: [userId], references: [userId], onDelete: Cascade)

  reason String? @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum PointType {
  ride
}

model PointModel {
  pointId String @id @default(uuid())

  type  PointType
  point Int

  userId String
  user   UserModel @relation(fields: [userId], references: [userId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model LevelModel {
  levelNo Int @id

  name          String
  color         String
  description   String @default("")
  requiredPoint Int

  couponGroupId String?
  couponAmount  Int     @default(0)

  users UserModel[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
